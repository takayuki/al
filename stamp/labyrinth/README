Introduction
------------

Given a maze, this benchmark finds the shortest-distance paths between pairs of
starting and ending points. The routing algorithm used is Lee's algorithm [1].

In this algorithm, the maze is represented as a grid, where each grid point can
contain connections to adjacent, non-diagonal grid points. The algorithm
searches for a shortest path between the start and end points of a connection by
performing a breadth-first search and labeling each grid point with its distance
from the start. This expansion phase will eventually  reach the end point if a
connection is possible. A second traceback phase then forms the connection by
following any path with a decreasing distance. This algorithm is guaranteed to
find the shortest path  between a start and end point; however, when multiple
paths are made, one path may block another.

When creating the transactional version of this program, the techniques
described in [2] were used. When using this benchmark, please cite [3].


Compiling and Running
---------------------

To build the application, simply run:

    make -f <makefile>

in the source directory. For example, for the sequential flavor, run:

    make -f Makefile.seq

By default, this produces an executable named "labyrinth", which can then be
run in the following manner:

    ./labyrinth -i <input_file>

The following input file is recommended for simulated runs:

    ./labyrinth -i inputs/random-x32-y32-z3-n64.txt

For non-simulator runs, a larger input can be used:

    ./labyrinth -i inputs/random-x256-y256-z5-n256.txt


Input Files
-----------

More input sets can be generated by using "inputs/generate.py". For example,

    inputs/generate.py 128 128 3 64

Will create a 128x128x3 maze grid and select 64 uniformly random start/end
point pairs.


References
----------

[1] C. Lee. An algorithm for path connections and its applications. IRE Trans.
    On Electronic Computers, 1961.

[2] I. Watson, C. Kirkham, and M. Lujan. A Study of a Transactional Parallel
    Routing Algorithm. Proceedings of the 16th International Conference on
    Parallel Architectures and Compilation Techniques, 2007.

[3] C. Cao Minh, M. Trautmann, J. Chung, A. McDonald, N. Bronson, J. Casper,
    C. Kozyrakis, and K. Olukotun. An Effective Hybrid Transactional Memory
    System with Strong Isolation Guarantees. In Proceedings of the 34th Annual
    International Symposium on Computer Architecture, 2007.
