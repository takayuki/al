--- /usr/include/sys/tree.h	2004-03-28 11:38:30.000000000 -0800
+++ tree.h	2008-03-19 16:15:53.000000000 -0700
@@ -112,13 +112,14 @@
 
 /* Generates prototypes and inline functions */
 
-#define SPLAY_PROTOTYPE(name, type, field, cmp)				\
+#define SPLAY_PROTOTYPE(name, type, field, cmp, lock)			\
 void name##_SPLAY(struct name *, struct type *);			\
 void name##_SPLAY_MINMAX(struct name *, int);				\
 struct type *name##_SPLAY_INSERT(struct name *, struct type *);		\
 struct type *name##_SPLAY_REMOVE(struct name *, struct type *);		\
 									\
 /* Finds the node with the same key as elm */				\
+__attribute__((atomic (lock)))						\
 static __inline struct type *						\
 name##_SPLAY_FIND(struct name *head, struct type *elm)			\
 {									\
@@ -130,6 +131,7 @@
 	return (NULL);							\
 }									\
 									\
+__attribute__((atomic (lock)))						\
 static __inline struct type *						\
 name##_SPLAY_NEXT(struct name *head, struct type *elm)			\
 {									\
@@ -144,6 +146,7 @@
 	return (elm);							\
 }									\
 									\
+__attribute__((atomic (lock)))						\
 static __inline struct type *						\
 name##_SPLAY_MIN_MAX(struct name *head, int val)			\
 {									\
@@ -154,7 +157,8 @@
 /* Main splay operation.
  * Moves node close to the key of elm to top
  */
-#define SPLAY_GENERATE(name, type, field, cmp)				\
+#define SPLAY_GENERATE(name, type, field, cmp, lock)			\
+__attribute__((atomic (lock)))						\
 struct type *								\
 name##_SPLAY_INSERT(struct name *head, struct type *elm)		\
 {									\
@@ -179,6 +183,7 @@
     return (NULL);							\
 }									\
 									\
+__attribute__((atomic (lock)))						\
 struct type *								\
 name##_SPLAY_REMOVE(struct name *head, struct type *elm)		\
 {									\
@@ -200,14 +205,15 @@
 	return (NULL);							\
 }									\
 									\
+__attribute__((atomic (lock)))						\
 void									\
 name##_SPLAY(struct name *head, struct type *elm)			\
 {									\
-	struct type __node, *__left, *__right, *__tmp;			\
+	struct type ____node, *__node = &____node, *__left, *__right, *__tmp;\
 	int __comp;							\
 \
-	SPLAY_LEFT(&__node, field) = SPLAY_RIGHT(&__node, field) = NULL;\
-	__left = __right = &__node;					\
+	SPLAY_LEFT(__node, field) = SPLAY_RIGHT(__node, field) = NULL;	\
+	__left = __right = __node;					\
 \
 	while ((__comp = (cmp)(elm, (head)->sph_root)) != 0) {		\
 		if (__comp < 0) {					\
@@ -232,18 +238,19 @@
 			SPLAY_LINKRIGHT(head, __left, field);		\
 		}							\
 	}								\
-	SPLAY_ASSEMBLE(head, &__node, __left, __right, field);		\
+	SPLAY_ASSEMBLE(head, __node, __left, __right, field);		\
 }									\
 									\
 /* Splay with either the minimum or the maximum element			\
  * Used to find minimum or maximum element in tree.			\
  */									\
+__attribute__((atomic (lock)))						\
 void name##_SPLAY_MINMAX(struct name *head, int __comp) \
 {									\
-	struct type __node, *__left, *__right, *__tmp;			\
+	struct type ____node, *__node = &____node, *__left, *__right, *__tmp;\
 \
-	SPLAY_LEFT(&__node, field) = SPLAY_RIGHT(&__node, field) = NULL;\
-	__left = __right = &__node;					\
+	SPLAY_LEFT(__node, field) = SPLAY_RIGHT(__node, field) = NULL;	\
+	__left = __right = __node;					\
 \
 	while (1) {							\
 		if (__comp < 0) {					\
@@ -268,7 +275,7 @@
 			SPLAY_LINKRIGHT(head, __left, field);		\
 		}							\
 	}								\
-	SPLAY_ASSEMBLE(head, &__node, __left, __right, field);		\
+	SPLAY_ASSEMBLE(head, __node, __left, __right, field);		\
 }
 
 #define SPLAY_NEGINF	-1
@@ -308,7 +315,7 @@
 	struct type *rbe_left;		/* left element */		\
 	struct type *rbe_right;		/* right element */		\
 	struct type *rbe_parent;	/* parent element */		\
-	int rbe_color;			/* node color */		\
+	long rbe_color;			/* node color */		\
 }
 
 #define RB_LEFT(elm, field)		(elm)->field.rbe_left
@@ -387,7 +394,8 @@
 /* Main rb operation.
  * Moves node close to the key of elm to top
  */
-#define RB_GENERATE(name, type, field, cmp)				\
+#define RB_GENERATE(name, type, field, cmp, lock)			\
+__attribute__((atomic (lock)))						\
 void									\
 name##_RB_INSERT_COLOR(struct name *head, struct type *elm)		\
 {									\
@@ -432,6 +440,7 @@
 	RB_COLOR(head->rbh_root, field) = RB_BLACK;			\
 }									\
 									\
+__attribute__((atomic (lock)))						\
 void									\
 name##_RB_REMOVE_COLOR(struct name *head, struct type *parent, struct type *elm) \
 {									\
@@ -510,11 +519,12 @@
 		RB_COLOR(elm, field) = RB_BLACK;			\
 }									\
 									\
+__attribute__((atomic (lock)))						\
 struct type *								\
 name##_RB_REMOVE(struct name *head, struct type *elm)			\
 {									\
 	struct type *child, *parent, *old = elm;			\
-	int color;							\
+	long color;							\
 	if (RB_LEFT(elm, field) == NULL)				\
 		child = RB_RIGHT(elm, field);				\
 	else if (RB_RIGHT(elm, field) == NULL)				\
@@ -578,6 +588,7 @@
 }									\
 									\
 /* Inserts a node into the RB tree */					\
+__attribute__((atomic (lock)))						\
 struct type *								\
 name##_RB_INSERT(struct name *head, struct type *elm)			\
 {									\
@@ -609,6 +620,7 @@
 }									\
 									\
 /* Finds the node with the same key as elm */				\
+__attribute__((atomic (lock)))						\
 struct type *								\
 name##_RB_FIND(struct name *head, struct type *elm)			\
 {									\
@@ -627,6 +639,7 @@
 }									\
 									\
 /* ARGSUSED */								\
+__attribute__((atomic (lock)))						\
 struct type *								\
 name##_RB_NEXT(struct type *elm)					\
 {									\
@@ -648,6 +661,7 @@
 	return (elm);							\
 }									\
 									\
+__attribute__((atomic (lock)))						\
 struct type *								\
 name##_RB_MINMAX(struct name *head, int val)				\
 {									\
